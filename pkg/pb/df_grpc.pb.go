// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DfapiClient is the client API for Dfapi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DfapiClient interface {
	RunTask(ctx context.Context, in *Input, opts ...grpc.CallOption) (Dfapi_RunTaskClient, error)
}

type dfapiClient struct {
	cc grpc.ClientConnInterface
}

func NewDfapiClient(cc grpc.ClientConnInterface) DfapiClient {
	return &dfapiClient{cc}
}

func (c *dfapiClient) RunTask(ctx context.Context, in *Input, opts ...grpc.CallOption) (Dfapi_RunTaskClient, error) {
	stream, err := c.cc.NewStream(ctx, &Dfapi_ServiceDesc.Streams[0], "/dfserver.pb.Dfapi/RunTask", opts...)
	if err != nil {
		return nil, err
	}
	x := &dfapiRunTaskClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dfapi_RunTaskClient interface {
	Recv() (*Output, error)
	grpc.ClientStream
}

type dfapiRunTaskClient struct {
	grpc.ClientStream
}

func (x *dfapiRunTaskClient) Recv() (*Output, error) {
	m := new(Output)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DfapiServer is the server API for Dfapi service.
// All implementations must embed UnimplementedDfapiServer
// for forward compatibility
type DfapiServer interface {
	RunTask(*Input, Dfapi_RunTaskServer) error
	mustEmbedUnimplementedDfapiServer()
}

// UnimplementedDfapiServer must be embedded to have forward compatible implementations.
type UnimplementedDfapiServer struct {
}

func (UnimplementedDfapiServer) RunTask(*Input, Dfapi_RunTaskServer) error {
	return status.Errorf(codes.Unimplemented, "method RunTask not implemented")
}
func (UnimplementedDfapiServer) mustEmbedUnimplementedDfapiServer() {}

// UnsafeDfapiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DfapiServer will
// result in compilation errors.
type UnsafeDfapiServer interface {
	mustEmbedUnimplementedDfapiServer()
}

func RegisterDfapiServer(s grpc.ServiceRegistrar, srv DfapiServer) {
	s.RegisterService(&Dfapi_ServiceDesc, srv)
}

func _Dfapi_RunTask_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DfapiServer).RunTask(m, &dfapiRunTaskServer{stream})
}

type Dfapi_RunTaskServer interface {
	Send(*Output) error
	grpc.ServerStream
}

type dfapiRunTaskServer struct {
	grpc.ServerStream
}

func (x *dfapiRunTaskServer) Send(m *Output) error {
	return x.ServerStream.SendMsg(m)
}

// Dfapi_ServiceDesc is the grpc.ServiceDesc for Dfapi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dfapi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dfserver.pb.Dfapi",
	HandlerType: (*DfapiServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RunTask",
			Handler:       _Dfapi_RunTask_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "df.proto",
}
